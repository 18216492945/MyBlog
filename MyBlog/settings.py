# coding=utf-8
"""
Django settings for MyBlog project.

Generated by 'django-admin startproject' using Django 1.11.3.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""
import logging
import os
import socket

import constants

hostname = socket.gethostname()
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '9@47ifi$ren*wzm&c7%^oa-gg9py_&i77pgtbn8t)1qf8_yl09'

# SECURITY WARNING: don't run with debug turned on in production!

DEBUG = constants.DEBUG
ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_crontab',
    'haystack',
    'blog',
    'api',
    'ckeditor',
    'ckeditor_uploader',
    'rest_framework',

]

# Haystack  设置 ES
HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine',
        'URL': 'http://47.93.23.189:9200/',  # elasticsearch运行的服务器ip地址，端口号固定为9200
        'INDEX_NAME': 'blog',  # 指定elasticsearch建立的索引库的名称
    },
}
# 当添加、修改、删除数据时，自动生成索引
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'

REST_FRAMEWORK = {
    # 异常处理
    "EXCEPTION_HANDLER": "api.exceptions.exception_handler",
    "DEFAULT_PAGINATION_CLASS": 'api.pagination.StandardResultsSetPagination',
}

CRONJOBS = [
    ('0 2 */1 * *', 'MyBlog.utils.record_visitor', '>> /data/logs/blog_crontab.log'),
    ('0 3 */1 * *', 'MyBlog.utils.record_ip', '>> /data/logs/blog_crontab.log'),
]

AUTH_USER_MODEL = 'blog.UserProfile'

MIDDLEWARE = [

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'blog.middleware.OnlineMiddleware'
]

ROOT_URLCONF = 'MyBlog.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # 设置网站模板根目录
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # 上下文Context定义
                'MyBlog.context_processor.site_info',

            ],
        },
    },
]

WSGI_APPLICATION = 'MyBlog.wsgi.application'

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'blog',
        'USER': 'root',
        'PASSWORD': '',
        'HOST': constants.DB_HOST,
        'PORT': '3306',
        'CHARSET': 'utf8'
    }}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/
# 修改时区时间设置
LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

# 静态文件
# STATIC_URL = '/static/'


# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
# MEDIA_ROOT = 'media'

# 七牛云密钥等配置
QINIU_ACCESS_KEY = ''
QINIU_SECRET_KEY = ''
QINIU_BUCKET_NAME = ''
QINIU_BUCKET_DOMAIN = 'cdn.mongona.com'
QINIU_SECURE_URL = True  # 使用https
PREFIX_URL = 'https://'

DEFAULT_FILE_STORAGE = 'qiniustorage.backends.QiniuStorage'
STATICFILES_STORAGE = 'qiniustorage.backends.QiniuStaticStorage'

STATIC_URL = QINIU_BUCKET_DOMAIN + '/static/'

# 上传文件地址配置
MEDIA_URL = PREFIX_URL + QINIU_BUCKET_DOMAIN + '/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "cdn"),
]

# STATIC_ROOT = 'static'
# print(STATIC_ROOT, STATIC_URL)
CKEDITOR_UPLOAD_PATH = 'upload/image/'

CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'full',
        'toolbar_Custom': [['Blockquote', 'CodeSnippet'], ],
        'extraPlugins': ','.join(['codesnippet', 'uploadimage', 'widget', 'lineutils', ]),
        'height': 800,
        'width': 900
    },
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': '%(asctime)s [pid:%(process)d] [%(levelname)s] %(message)s'
        },
        'precise': {
            'format': '[pid:%(process)d]  %(levelname)s \x1b[6;30;42m%(asctime)s\x1b[0m %(name)s \x1b[1;32;40m%(message)s\x1b[0m\n'
        },
    },
    'handlers': {
        'default': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': constants.LOG_FILE_PATH,  # 日志输出文件
            'maxBytes': constants.LOG_MAX_BYTES,  # 备份大小
            'backupCount': constants.LOG_BACKUP_COUNT,  # 备份份数
            'formatter': 'precise',  # 使用哪种formatters日志格式
        },
        'error': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': constants.LOG_FILE_PATH,
            'maxBytes': constants.LOG_MAX_BYTES,
            'backupCount': constants.LOG_BACKUP_COUNT,
            'formatter': 'precise',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'standard'
        },
        'request_handler': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': constants.LOG_FILE_PATH,
            'maxBytes': constants.LOG_MAX_BYTES,
            'backupCount': constants.LOG_BACKUP_COUNT,
            'formatter': 'standard',
        },
        'scprits_handler': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': constants.LOG_FILE_PATH,
            'maxBytes': constants.LOG_MAX_BYTES,
            'backupCount': constants.LOG_BACKUP_COUNT,
            'formatter': 'standard',
        }
    },
    'loggers': {
        'django': {
            'handlers': ['console'] if DEBUG else ['default', 'console'],
            'level': 'INFO',
            'propagate': False
        },
        'django.request': {
            'handlers': ['request_handler'],
            'level': 'INFO',
            'propagate': False,
        },
        'scripts': {
            'handlers': ['scprits_handler'],
            'level': 'INFO',
            'propagate': False
        },
        'django.error': {
            'handlers': ['default', 'error'],
            'level': 'ERROR',
            'propagate': True
        }
    }
}

logger = logging.getLogger('django')
